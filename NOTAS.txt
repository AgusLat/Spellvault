ABJURACION - AZUL/CELESTE #90D3EA
TRANSMUTACION - MORADO  #9890EA
ADIVINACION - BLANCO/AMARILLO #FFF8A5
ENCANTACION - VERDE #B0EA90
NIGROMANCIA - NEGRO #747B6D
EVOCACION - ROJO #EA9090
ILUSION - ROSA #EA90DB
CONJURACION - NARANJA #EAC390
CANTRIP #A1D5D0



*CAMBIAR LAS SIGUIENTES URLS* (HECHO)

hooks:
    -useAdvancedSpellSearch
    -useSpellSearch
pages:
    -Home (homeLoader)

*SOLUCIONAR EL PROBLEMA DE REAJUSTE VERTICAL EN MOBILE* (HECHO)

-Se cambia el tamaño de los componentes al mostrarse/ocultarse la barra de navegacion.
-Intentar modificar la unidad dvh->vh
-Cambiar de dvh a vh fue la solucion =]


*INVESTIGAR E IMPLEMENTAR OAUTH 2.0*

-https://developers.google.com/identity/protocols/oauth2?hl=es-419



*ANIMAR ICONO EXPANDIR/MINIMIZAR DE LA SPELLCARD*

-Hacer un 'toggle' de clases que contengan animaciones al clickear.
-Donde termina una animacion de clase a -> comienza la animacion de clase b.




*DISEÑO PARA LOGIN/SIGNUP* (HECHO)
-Crear en /pages un componente Access (X)
-Desde el componente Access pasar la prop accessType al componente <RegisterForm> (X)
    Esta prop va a definir si el usuario quiere LOGIN o SIGNUP
    Mediante useState() vamos a cambiar el valor de accessType.
-El handleSubmit() actua diferente segun el valor de la prop accesType, pasarlo por parametro (X)


*DISEÑO LIBRO DE HECHIZOS*
-CLASES:
    -BARD (CHA)
    -CLERIC (WIS)
    -DRUID (WIS)
    -PALADIN (CHA)
    -RANGER (WIS)
    -SORCERER (CHA)
    -WARLOCK (CHA)
    -WIZARD (INT)
-SPELL ATTACK: D20 + SPELL MODIFIER(CLASS DEPENDANT) + PROFICIENCY
-CD SAVING THROW: 8 + SPELL MODIFIER(CLASS DEPENDANT) + PROFICIENCY



*CONTEXTO PERSONAJE ACTIVO*
-Crear un contexto para el personaje activo de cada usuario.
-Los datos de este contexto se van a guardar dentro de los datos del usuario en la db.
-SE BUSCA EL ACTIVE CHARACTER EN EL USUARIO
- spellData {
    slots: { '1st': 4, '2nd': 3, '3rd': 2, '4th': 0, '5th': 0, '6th': 0, '7th': 0, '8th': 0, '9th': 0 },   //se carga desde dndClasses (no se toca)
    availableSlots: { '1st': 4, '2nd': 3, '3rd': 2, '4th': 0, '5th': 0, '6th': 0, '7th': 0, '8th': 0, '9th': 0 }, //se va modificando 
    knownSpells: [{spellSchema},{spellSchema},...],
    preparedSpells: [ {spellSchema},{spellSchema},...]
}
- BOTON PARA GUARDAR EL CONTEXTO A LA BBDD O RESETEARLO -> 1 boton para controlar SLOTS y otro para SPELLS.

-MODELO DEL OBJETO CONTEXT: {
    characterList:[ idPersonaje, idPersonaje, idPersonaje]
    activeCharacter: {
        personaje con isActive en TRUE
    }
}



*PASOS CREACION PERSONAJE* (HAY QUE DISEÑAR EL CHARACTERS CONTEXT)
1-RELLENADO DE FORMULARIO EN EL FRONTEND (COMPONENTE CreateCharacter)
2-EL FORMULARIO EJECUTA UN HOOK -> Crear useCharacterManager()
3-EL HOOK DEVUELVE 3  FUNCIONES (usamos createCharacter) -> createCharacter, editCharacter, deleteCharacter
4- createCharacter() : Tiene que hacer un fetch a una ruta del backend (hay que crearla) y su controlador 
    hara que se cree un nuevo personaje en la BBDD y le asignara la ID de ese personaje AL USUARIO QUE LO CREO EN LA BBDD
    en su propiedad "characters_id".
    Cuando la peticion sea valida, hay que ejecutar un dispatch para actualizar el CONTEXTO CHARACTERS.


********IMPORTANTE********
-REALIZAR ESTOS CAMBIOS ANTES DE SUBIR EL CODIGO A GITHUB:
-AÑADIR LA VARIABLE DE ENTORNO "JWT_SECRET" (X)
-CAMBIAR LAS RUTAS DE LOS HOOKS: useSignup, useLogin, useLogout, useCreateCharacter
-PASARLAS DE "http://localhost:4000/api/user/signup"  => "https://spellvault-api.vercel.app/api/user/signup"



